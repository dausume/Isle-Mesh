events { worker_connections 1024; }

http {

    include mime.types;

    # Set what the logs look like per request that comes through, comment or uncomment this
    # if you are having problems with the proxy and need help figuring out what requests coming
    # in look like, you will need to figure out what nginx variables correspond to headers and
    # other protocol info coming in through the proxy if you want to see it here.
    log_format combined_with_time '$remote_addr - $remote_user [$time_local] "$request"'
                                  '$status $body_bytes_sent "$http_referer"'
                                  '"$http_user_agent" "$http_x_forwarded_for"'

    # Forwards all logs to go to the console so you can see them in the docker compose or container console.
    access_log /dev/stdout combined_with_time

    # Forwards all proxy errors to the terminal/console.
    error_log /dev/stderr debug;

    upstream backend_container {
        server backend:8443;
    }

    upstream frontend_container {
        server frontend:8443;
    }

    # Optional: for static file debug container or mdns relay
    #upstream mdns_container {
    #    server mdns:5353;
    #}

    server {
        listen 80;

        # mDNS server name auto-inserted from configuration (Env var : SSL_URL)
        server_name mesh-app.local;

        # Put a default SEO, using raw html,css,js on here that robots can parse to perform indexing and robots.txt page on here.

        # Forward all traffic to 443 (https).
        #return 301 https://$host$request_uri;

        location / {
            default_type text/plain;
            return 200 "✅ http://mesh-app.local reached successfully.\n";
        }

    }

    # Primary url
    add_header Access-Control-Allow-Origin "https://mesh-app.local"

    # Sub-domain urls
    add_header Access-Control-Allow-Origin "https://frontend.mesh-app.local"
    add_header Access-Control-Allow-Origin "https://backend.mesh-app.local"

    # Make certain to add all locally hosted mDNS urls and (in vLan builds) 
    add_header Content-Security-Policy "
    frame-src 
    'self' 
    https://mesh-app.local 
    https://frontend.mesh-app.local 
    https://backend.mesh-app.local;
    
    default-src
    'self'
    https://mesh-app.local
    https://frontend.mesh-app.local
    https://backend.mesh-app.local;
    
    child-src
    'self'
    https://mesh-app.local
    https://frontend.mesh-app.local
    https://backend.mesh-app.local;
    
    script-src
    'self'
    https://mesh-app.local
    https://frontend.mesh-app.local
    https://backend.mesh-app.local;
    
    style-src
    'self'
    https://mesh-app.local
    https://frontend.mesh-app.local
    https://backend.mesh-app.local;

    img-src
    'self'
    https://mesh-app.local
    https://frontend.mesh-app.local
    https://backend.mesh-app.local;

    font-src
    'self'
    https://mesh-app.local
    https://frontend.mesh-app.local
    https://backend.mesh-app.local;

    object-src
    'self'
    https://mesh-app.local
    https://frontend.mesh-app.local
    https://backend.mesh-app.local;
    " always;
    

    # Core static information for the proxiees mesh-app.local specification
    server {
        listen 443 ssl default_server;
        # mDNS server name auto-inserted from configuration (Env var : SSL_URL)
        server_name mesh-app.local

        # SSL Configuration for the base mDNS server name
        ssl_certificate /ssl/certs/mesh-app.crt;
        ssl_certificate_key /ssl/keys/mesh-app.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;

        location = /robots.txt {
            root /etc/nginx/static/;
            default_type text/plain;
        }

        # Advertises the api's that should be well-known, as well as child well-known endpoints like those on sub-domains, 
        # or if certain endpoints also need well-known json documentations.
        #
        #location = /.well-known {
        #    return 302 /.well-known/well-known.json;
        #}

        #location = /site-map.xml {
        #    return 302 /.well-known/site-map.xml;
        #}

        location / {
            default_type text/plain;
            return 200 "✅ https://mesh-app.local reached successfully.\n";
        }

        # Anything not specified to be defined otherwise will default to this url.
        #location / {
        #    return 302 https://frontend.mesh-app.local;
        #}


    }

    # Backend server proxy
    server {
        listen 443 ssl;
        server_name backend.mesh-app.local;

        # For the proxy level we still use the base mesh-app.crt for all sub-domains,
        # the 'actual' subdomain re-encrypt occurs via mTLS with the backend server.
        ssl_certificate /ssl/certs/mesh-app.crt;
        ssl_certificate_key /ssl/keys/mesh-app.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;


        location / {
            proxy_pass https://backend_container:8443;

            # Tell nginx to trust Falcon’s self-signed server cert by tracking the public key.
            proxy_ssl_trusted_certificate /ssl/certs/backend.mesh-app.crt;

            proxy_ssl_verify on;
            proxy_ssl_verify_depth 2;

            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

    }

    # Our frontend server proxy, it is https between this proxy and the client,
    # but it does not need mTLS between the proxy and frontend server since they are on the same real LAN
    # despite being connected via a vLAN.
    #
    # No re-encyption or mTLS here, we just use https.
    server {

        listen 443 ssl;
        server_name frontend.mesh-app.local;

        # For the proxy level we still use the base mesh-app.crt for all sub-domains,
        # the 'actual' subdomain re-encrypt occurs via mTLS with the backend server.
        ssl_certificate /ssl/certs/mesh-app.crt;
        ssl_certificate_key /ssl/keys/mesh-app.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;


        location / {
            proxy_pass http://frontend_container:8443;

            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

    }

}