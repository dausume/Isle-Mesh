events { worker_connections 1024; }

http {

    include mime.types;

    # Set what the logs look like per request that comes through, comment or uncomment this
    # if you are having problems with the proxy and need help figuring out what requests coming
    # in look like, you will need to figure out what nginx variables correspond to headers and
    # other protocol info coming in through the proxy if you want to see it here.
    log_format combined_with_time '$remote_addr - $remote_user [$time_local] "$request"'
                                  '$status $body_bytes_sent "$http_referer"'
                                  '"$http_user_agent" "$http_x_forwarded_for"'

    # Forwards all logs to go to the console so you can see them in the docker compose or container console.
    access_log /dev/stdout combined_with_time

    # Forwards all proxy errors to the terminal/console.
    error_log /dev/stderr debug;

    upstream frontend {
        frontend:3000
    }

    upstream backend {
        backend:8080
    }

    upstream authentication {
        auth:8800
    }

    upstream cert-authority {
        ca:9000
    }

    upstream mdns {
        mdns:5353
    }

    server {
        listen 80;

        # Put a default SEO, using raw html,css,js on here that robots can parse to perform indexing and robots.txt page on here.

        # Forward all traffic to 443 (https).
        return 301 https://$host$request_uri;
    }

    # Primary url
    add_header Access-Control-Allow-Origin "https://mesh-app.local"

    # Sub-domain urls
    add_header Access-Control-Allow-Origin "https://*SSL_SUBDOMAIN_URL*"
    add_header Access-Control-Allow-Origin "https://*SSL_SUBDOMAIN_URL*"
    add_header Access-Control-Allow-Origin "https://*SSL_SUBDOMAIN_URL*"

    add_header Content-Security-Policy
    "
    frame-src
    'self'
    https://mesh-app.local;

    https://*SSL_SUBDOMAIN_URL*;

    default-src
    'self'
    https://mesh-app.local;

    https://*SSL_SUBDOMAIN_URL*;

    child-src
    'self'
    https://mesh-app.local;

    https://*SSL_SUBDOMAIN_URL*;

    script-src
    'self'
    https://mesh-app.local;

    https://*SSL_SUBDOMAIN_URL*;

    style-src
    'self'
    https://mesh-app.local;

    https://*SSL_SUBDOMAIN_URL*;

    img-src
    'self'
    https://mesh-app.local;

    https://*SSL_SUBDOMAIN_URL*;

    font-src
    'self'
    https://mesh-app.local;

    https://*SSL_SUBDOMAIN_URL*;

    object-src
    'self'
    https://mesh-app.local;

    https://*SSL_SUBDOMAIN_URL*;

    "
    always;

    server {
        listen 443 ssl;
        # mDNS server name auto-inserted from configuration (Env var : SSL_URL)
        server_name *SSL_URL*

        location = /robots.txt {
            root /etc/nginx/static/;
            default_type text/plain;
        }

        # Advertises the api's that should be well-known, as well as child well-known endpoints like those on sub-domains, 
        # or if certain endpoints also need well-known json documentations.
        #
        location = /.well-known {
            return 302 /.well-known/well-known.json;
        }

        location = /site-map.xml {
            return 302 /.well-known/well-known.json;
        }


        # SSL Configuration for the base mDNS server name
        ssl_certificate *CERT_DIR*;
        ssl_certificate_key *CERT_DIR*;
        ssl_certificate_key *KEY_DIR*;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;


    }

}