events { worker_connections 1024; }

http {

    include mime.types;

    # Set what the logs look like per request that comes through, comment or uncomment this
    # if you are having problems with the proxy and need help figuring out what requests coming
    # in look like, you will need to figure out what nginx variables correspond to headers and
    # other protocol info coming in through the proxy if you want to see it here.
    log_format combined_with_time '$remote_addr - $remote_user [$time_local] "$request"'
                                  '$status $body_bytes_sent "$http_referer"'
                                  '"$http_user_agent" "$http_x_forwarded_for"';

    # Forwards all logs to go to the console so you can see them in the docker compose or container console.
    access_log /dev/stdout combined_with_time;

    # Forwards all proxy errors to the terminal/console.
    error_log /dev/stderr debug;

upstream python-api {
    server python-api:5000;
}

    # Primary url
    add_header Access-Control-Allow-Origin "https://python-api.local";
    add_header Access-Control-Allow-Origin "wss://python-api.local";

    # api Subdomain URL Origins for https and WebSockets
    add_header Access-Control-Allow-Origin "https://api.python-api.local";
    add_header Access-Control-Allow-Origin "wss://api.python-api.local";

    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self' https://python-api.local wss://python-api.local https://api.python-api.local wss://api.python-api.local ; frame-src  'self'  https://python-api.local wss://python-api.local https://api.python-api.local wss://api.python-api.local ; child-src 'self' https://python-api.local wss://python-api.local https://api.python-api.local wss://api.python-api.local ; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://python-api.local wss://python-api.local https://api.python-api.local wss://api.python-api.local ; style-src 'self' 'unsafe-inline' 'unsafe-eval' https://python-api.local wss://python-api.local https://api.python-api.local wss://api.python-api.local ; img-src 'self' 'unsafe-inline' 'unsafe-eval' https://python-api.local wss://python-api.local https://api.python-api.local wss://api.python-api.local ; font-src 'self' https://python-api.local wss://python-api.local https://api.python-api.local wss://api.python-api.local ; object-src 'self' https://python-api.local wss://python-api.local https://api.python-api.local wss://api.python-api.local ; connect-src 'self' https://python-api.local wss://python-api.local https://api.python-api.local wss://api.python-api.local ; " always;
    # python-api.local http server
    server {
        listen 80 default_server;

        # mDNS server name auto-inserted from configuration
        server_name python-api.local;

        # Put a default SEO, using raw html,css,js on here that robots can parse to perform indexing and robots.txt page on here.

        # Forward all traffic to 443 (https).
        #return 301 https://$host$request_uri;

        location / {
            default_type text/plain;
            return 200 "http://python-api.local reached successfully.\n";
        }

    }
    # Core static information for the proxies python-api.local specification
    # python-api.local https server
    server {
        listen 443 ssl default_server;
        # mDNS server name auto-inserted from configuration
        server_name python-api.local;

        # SSL Configuration for the base mDNS server name
        ssl_certificate /ssl/certs/mesh-converted.crt;
        ssl_certificate_key /ssl/keys/mesh-converted.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;

        location = /robots.txt {
            root /etc/nginx/static/;
            default_type text/plain;
        }

        # Advertises the api's that should be well-known, as well as child well-known endpoints like those on sub-domains,
        # or if certain endpoints also need well-known json documentations.
        #
        #location = /.well-known {
        #    return 302 /.well-known/well-known.json;
        #}

        #location = /site-map.xml {
        #    return 302 /.well-known/site-map.xml;
        #}

        location / {
            default_type text/plain;
            return 200 "https://python-api.local reached successfully.\n";
        }

        # Anything not specified to be defined otherwise will default to this url.
        #location / {
        #    return 302 https://frontend.python-api.local;
        #}

    }

    # api.python-api.local http server proxy
    server {
        listen 80;
        server_name api.python-api.local;

        location / {
            default_type text/plain;
            return 200 "http://api.python-api.local reached successfully.\n";
        }

    }
    # api.python-api.local https server proxy
    # No re-encryption or mTLS here, we just use https.
    server {
        listen 443 ssl;
        server_name api.python-api.local;

        # For the proxy level we still use the base python-api.local cert for communicating to sub-domains,
        # for the case of the frontend we perform no re-encrypt step since we are emulating this being 'hosted on the same network'.
        ssl_certificate /ssl/certs/mesh-converted.crt;
        ssl_certificate_key /ssl/keys/mesh-converted.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;

        location / {
            proxy_pass http://python-api;

            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

    }

}