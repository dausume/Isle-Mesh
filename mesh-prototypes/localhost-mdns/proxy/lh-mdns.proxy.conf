events { worker_connections 1024; }

http {

    include mime.types;

    # Set what the logs look like per request that comes through, comment or uncomment this
    # if you are having problems with the proxy and need help figuring out what requests coming
    # in look like, you will need to figure out what nginx variables correspond to headers and
    # other protocol info coming in through the proxy if you want to see it here.
    log_format combined_with_time '$remote_addr - $remote_user [$time_local] "$request"'
                                  '$status $body_bytes_sent "$http_referer"'
                                  '"$http_user_agent" "$http_x_forwarded_for"'

    # Forwards all logs to go to the console so you can see them in the docker compose or container console.
    access_log /dev/stdout combined_with_time

    # Forwards all proxy errors to the terminal/console.
    error_log /dev/stderr debug;

    upstream backend {
        server backend:8443;
    }

    upstream frontend {
        server frontend:8443;
    }

    # Optional: for static file debug container or mdns relay
    #upstream mdns_container {
    #    server mdns:5353;
    #}

    

    # Primary url
    add_header Access-Control-Allow-Origin "https://mesh-app.local";
    add_header Access-Control-Allow-Origin "wss://mesh-app.local";

    # Sub-domain urls
        # Frontend Subdomain URL Origins for https and WebSockets
        add_header Access-Control-Allow-Origin "https://frontend.mesh-app.local";
        add_header Access-Control-Allow-Origin "wss://frontend.mesh-app.local";
        # Backend Subdomain URL Origins for https and WebSockets
        add_header Access-Control-Allow-Origin "https://backend.mesh-app.local";
        add_header Access-Control-Allow-Origin "wss://backend.mesh-app.local";

    # Make certain to add all locally hosted mDNS urls and in vLAN (isle) or intranet (archipelago) builds add on origins as needed, noting that protocol, url, and port are all unique origins.
    add_header Content-Security-Policy "default-src 'self' https://mesh-app.local wss://mesh-app.local https://frontend.mesh-app.local wss://frontend.mesh-app.local https://backend.mesh-app.local wss://backend.mesh-app.local ; frame-src  'self'  https://mesh-app.local wss://mesh-app.local https://frontend.mesh-app.local wss://frontend.mesh-app.local https://backend.mesh-app.local wss://backend.mesh-app.local ; child-src 'self' https://mesh-app.local wss://mesh-app.local https://frontend.mesh-app.local wss://frontend.mesh-app.local https://backend.mesh-app.local wss://backend.mesh-app.local ; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://mesh-app.local wss://mesh-app.local https://frontend.mesh-app.local wss://frontend.mesh-app.local https://backend.mesh-app.local wss://backend.mesh-app.local ; style-src 'self' 'unsafe-inline' 'unsafe-eval' https://mesh-app.local wss://mesh-app.local https://frontend.mesh-app.local wss://frontend.mesh-app.local https://backend.mesh-app.local wss://backend.mesh-app.local ; img-src 'self' 'unsafe-inline' 'unsafe-eval' https://mesh-app.local wss://mesh-app.local https://frontend.mesh-app.local wss://frontend.mesh-app.local https://backend.mesh-app.local wss://backend.mesh-app.local ; font-src 'self' https://mesh-app.local wss://mesh-app.local https://frontend.mesh-app.local wss://frontend.mesh-app.local https://backend.mesh-app.local wss://backend.mesh-app.local ; object-src 'self' https://mesh-app.local wss://mesh-app.local https://frontend.mesh-app.local wss://frontend.mesh-app.local https://backend.mesh-app.local wss://backend.mesh-app.local ; connect-src 'self' https://mesh-app.local wss://mesh-app.local https://frontend.mesh-app.local wss://frontend.mesh-app.local https://backend.mesh-app.local wss://backend.mesh-app.local ; " always;
    
    # mesh-app.local http server
    server {
        listen 80;

        # mDNS server name auto-inserted from configuration (Env var : SSL_URL)
        server_name mesh-app.local;

        # Put a default SEO, using raw html,css,js on here that robots can parse to perform indexing and robots.txt page on here.

        # Forward all traffic to 443 (https).
        #return 301 https://$host$request_uri;

        location / {
            default_type text/plain;
            return 200 "http://mesh-app.local reached successfully.\n";
        }

    }

    # Core static information for the proxies mesh-app.local specification
    # mesh-app.local https server
    server {
        listen 443 ssl default_server;
        # mDNS server name auto-inserted from configuration (Env var : SSL_URL)
        server_name mesh-app.local;

        # SSL Configuration for the base mDNS server name
        ssl_certificate /ssl/certs/mesh-app.crt;
        ssl_certificate_key /ssl/keys/mesh-app.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;

        location = /robots.txt {
            root /etc/nginx/static/;
            default_type text/plain;
        }

        # Advertises the api's that should be well-known, as well as child well-known endpoints like those on sub-domains, 
        # or if certain endpoints also need well-known json documentations.
        #
        #location = /.well-known {
        #    return 302 /.well-known/well-known.json;
        #}

        #location = /site-map.xml {
        #    return 302 /.well-known/site-map.xml;
        #}

        location / {
            default_type text/plain;
            return 200 "https://mesh-app.local reached successfully.\n";
        }

        # Anything not specified to be defined otherwise will default to this url.
        #location / {
        #    return 302 https://frontend.mesh-app.local;
        #}


    }

    # backend.mesh-app.local http server proxy
    server {
        listen 80;
        server_name backend.mesh-app.local;

        location / {
            default_type text/plain;
            return 200 "http://backend.mesh-app.local reached successfully.\n";
        }

    }

    # Backend https server proxy
    server {
        listen 443 ssl;
        server_name backend.mesh-app.local;

        # For the proxy level we still use the base mesh-app.crt for communicating to all sub-domains as a front-door,
        # the 'actual' subdomain key/cert re-encrypt occurs via mTLS with the backend server, where the key
        # only exists on the backend side and our proxy does not have the key, only the cert for verifying the backend
        # identity via mTLS.  Whereas our backend should also have the mesh-app.local (proxy) cert only without the key.
        ssl_certificate /ssl/certs/mesh-app.crt;
        ssl_certificate_key /ssl/keys/mesh-app.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;


        location / {
            proxy_pass https://backend;

            # NOTE : proxy_ssl_* MUST be set at the location level, it CANNOT be set at the server level.
            proxy_ssl_certificate     /ssl/certs/mesh-app.crt;
            proxy_ssl_certificate_key /ssl/keys/mesh-app.key;

            # Trust the backend server's identity
            proxy_ssl_trusted_certificate /ssl/certs/backend.mesh-app.crt;

            proxy_ssl_verify on;
            proxy_ssl_verify_depth 2;

            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

    }

    # frontend.mesh-app.local http server proxy
    server {
        listen 80;
        server_name frontend.mesh-app.local;

        location / {
            default_type text/plain;
            return 200 "http://frontend.mesh-app.local reached successfully.\n";
        }

    }

    # Our frontend server proxy, it is https between this proxy and the client,
    # but it does not need mTLS between the proxy and frontend server since they are on the same real LAN
    # despite being connected via a vLAN.
    #
    # No re-encyption or mTLS here, we just use https.
    #
    # frontend.mesh-app.local https server proxy
    server {

        listen 443 ssl;
        server_name frontend.mesh-app.local;

        # For the proxy level we still use the base mesh-app.crt for communicating to sub-domains,
        # for the case of the frontend we perform no re-encrypt step since we are emulating this being 'hosted on the same network'.
        ssl_certificate /ssl/certs/mesh-app.crt;
        ssl_certificate_key /ssl/keys/mesh-app.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;


        location / {
            proxy_pass http://frontend;

            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

    }

}